import itertools
import jinja2
import textwrap


def all_possible_arguments():
    """
    Enumerates all possible permutations of ('x', 'y', 'z') tuple, starting
    with ('x') up to ('z', 'y', 'z'). These are argument names which function
    being expanded can take and return.
    """
    arguments = ('x', 'y', 'z')
    yield from itertools.permutations(arguments, 1)
    yield from itertools.permutations(arguments, 2)
    yield from itertools.permutations(arguments, 3)


def gencode_for_expand_function():
    """
    Generates program text for :func:`rvlm.utils.expand_function`. This, in
    fact, is the main function of this script. Don't forget to re-run code
    generation if you've changed the template below.
    """
    template_string = textwrap.dedent("""\
        # AUTOGENERATED, DO NOT EDIT!

        def expand_function_autogen(f, argspec):
            {% for input in inputs %}
            {% for output in outputs %}
            if argspec == "{{''.join(output)}}_{{''.join(input)}}":
                def result(x, y, z):
                    {{', '.join(output)}} = f({{', '.join(input)}})
                    return x, y, z

                return result

            {% endfor %}
            {% endfor %}

            raise Error()
        """)

    env = jinja2.Environment(lstrip_blocks=True, trim_blocks=True)
    template = env.from_string(template_string)
    return template.render(inputs=list(all_possible_arguments()),
                           outputs=list(all_possible_arguments()))


if __name__ == "__main__":
    print(gencode_for_expand_function())
